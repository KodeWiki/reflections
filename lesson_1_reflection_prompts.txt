How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Fill in your answer here

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Fill in your answer here

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Fill in your answer here

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Fill in your answer here

How can you use the commands git log and git diff to view the history of files?

    Fill in your answer here

How might using version control make you more confident to make changes that
could break something?

    Fill in your answer here

Now that you have your workspace set up, what do you want to try using Git for?

    Fill in your answer here

 -------------------------------------------

 git log : 	see a list of all commits in the given directory in
 			which this command was invoked.
 			Note that this command can only be used on folder which
 			are under version control using git.
 			'HEAD' : name for the latest commit_id at which git is
 			currently in your local box.

 git log --stat
 			along with the normal log it shows which files were 
 			changed, along the number of lines inserted and deleted
 			with respect to the previos commit

 git diff old_commit_id new_commit_id
 			outputs the difference b/w the old and new commit in
 			unified format

 git clone url_for_repository
 			checking out a new repository in your computer

 git checkout commit_id
 			git will restore itself to a given commit_id, making
 			the 'HEAD' to given commit_id (backward or forward)

 git checkout master
 			checks out the latest version of the repo

 git init
 			to initialize any given directory as a git repo.
 			
 			running 'git log' command on recently initialized directory
 			will give error, saying there is no head as there are no
 			commits yet

 			running 'git status' will give  output 'initial commit',
 			and will show the folders and files that are uncommited (to be committed once a commit is made.)

 git status
 			version control status of all the files in the repository.
 			(equivalent of svn st?)

 git diff
 			shows the difference b/w the working directory and staging
 			area, i.e. the changes still lying in workspace not added
 			to staging area.
 			'+' denotes the additive changes in workspace not added in 
 			staging area, '-' the decrimental in workspace with respect
 			to staging area (+ve for workspace)

 git diff --staged
 			shows the difference b/w the staging area and the 
 			current version of repo(having the last commited changes)
 			(+ve for staging area)

 git add file_name (or folder_name)
 			add a new file or folder in the staging area, so that 
 			they can be committed when a commit is made.

 git commit
 			commits all the changes that has been to the staging area.
 			Any changes in the workspace that in the workspace not 
 			added to staging area will not be committed. The changes
 			in the workspace will remain the way they were.

 git reset <file_name> <folder_name>
 			if a file has been added to staging area (new or modified)
 			then that unstaged using this. Note that the changes will be restored to workspace and not lost

 git checkout <file_name>
 			If a file is modified in workspace then the changes can be
 			undone by using this command. Note that all the changes in
 			the workspace will be lost. 
 			if there is a newly added file in the workspace (untracked)
 			and it is to removed then just 'rm -rf <file_name>'
 
 git reset --hard
 			reverts all the changes in both workspace and staging area.
 			Be careful while using this as the changes cannot be 
 			restored back.


 git branch
 			outputs all the branches of the repo available in local 
 			machine
 			The branch which has '*' in front of it is the one in 
 			which changes are made when commited. We call that
 			the 'checked out' branch. By default it is the master 
 			branch.

 git branch label_name
 			creating a new branch with name as 'label_name'

 git checkout branch_label_name
 			changing the checked out branch

 git checkout -b new_branch_name
 			equivalent to running the following 2 commands
 				git branch new_branch_name
 				git checkout new_branch_name

 git merge branch_a branch_b
 			Merges 'branch_b', and 'branch_a' into branch_a

 			When 2 branches are merged then the commits of the branches
 			are shown interleaved in 'git log' sorted by time.
 			So it becomes difficult to see the difference b/w a commit
 			and its parent to understand what exactly changed.

 git show commit_id
 			shows diff b/w the commit_id and its parent commit

 git log --graph --oneline branch_a branch_b

 git config --global color.ui auto
 			get diffs having different colors for deletions and 
 			additions

 git config commands
 	git config --global core.editor "subl -n -w"
	git config --global push.default upstream
	git config --global merge.conflictstyle diff3


Note :
	1) 	.git folder is only stored at the top level folder of a repo,
		and the underlying folders do not have this folder. Although
		we can use git commands in the underlying folders as well.

	2) 	A folder can directly be added into staging area using 
		'git add' command. Doing so adds all the underlying files into the staging area.

	3)	In order to bring a folder into git version control
			- 	first do a 'git init' on that folder
			-	then add the respective files and folders to the staging
				area
			-	'git commit'

 	4)	Modified changes have to be added first to staging area,
 		and then commited.

 	5) 	Different terminologies used in output of 'git status'

	 	'modified' 	
	 			file already committed has been modifed 
	 
		 'new file'	
		 			a new file added, yet to be committed
		 
		 'Changes to be committed section'
		 			files added to the staging area (modified or 
		 			new_files)
		 
		 'untracked files'
		 			newly added files in workspace not in staging area

		 'Changes not staged for commit'
		 			modified files not added to statging area

	6)	Let's say a repo has 5 commits [ having commit ids 1, 2 ,3,
		4, 5] and it is currently at commit id 5 (i.e. the latest).
		Now let's say that we moved to commit id 4 by checking it out.
		Now at this point let's make another commit say with id 4-a.
		And after that if we move to master (i.e.) commit id 5 by 
		'git checkout master' then 4-a will be lost.
		Using git log in such a case will only show [1, 2, 3, 4, 5],
		as the commit 4-a is not listed in the any of the branches
		it will not show up in the list. However if one note's down
		its commit id (in this case 4-a) then we certianly can reach it.


 Question
 	1) 	What does 'branch master' mean ?
 	2) 	what about adding a folder into the staging area, some of whose
 		files have already been added.
